// get_holders_ethplorer.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø 4.2: –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–ê–Ø –ü–ê–£–ó–ê)
const axios = require('axios');
const { Pool } = require('pg');

const CONFIG = {
    growthThresholds: { vsPrevious: 0.3, last1Hour: 0.8, last3Hours: 1.0, last12Hours: 3.0, last24Hours: 5.0 },
    telegram: { botToken: process.env.TELEGRAM_BOT_TOKEN, chatId: process.env.TELEGRAM_CHAT_ID },
    openai: { apiKey: process.env.OPENAI_API_KEY, model: 'gpt-4o' },
    cleanupIntervalHours: 24,
    apiPauseMs: 1500, // <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
};

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
});

(async () => {
    console.log('–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...');

    let contracts;
    let testPreviousValue = null;
    let testContract = null;
    let isTestMode = false;

    if (process.argv[2] === '--test') {
        isTestMode = true;
        testContract = process.argv[3];
        testPreviousValue = process.argv[4] ? parseInt(process.argv[4], 10) : null;
        contracts = [testContract];
        
        console.log(`--- –ó–ê–ü–£–°–ö –í –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ${testContract} ---`);
        if (!testContract || testPreviousValue === null) {
            console.error("–û—à–∏–±–∫–∞: –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ —É–∫–∞–∂–∏—Ç–µ --test <–∫–æ–Ω—Ç—Ä–∞–∫—Ç> <–∑–Ω–∞—á–µ–Ω–∏–µ>");
            process.exit(1);
        }
    } else {
        contracts = process.argv.slice(2);
    }

    if (!contracts || !contracts.length || (contracts.length === 1 && !contracts[0])) {
        console.error("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.");
        process.exit(1);
    }
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${contracts.length} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);

    await pool.query(`CREATE TABLE IF NOT EXISTS holders (id SERIAL PRIMARY KEY, contract TEXT NOT NULL, symbol TEXT, holders INTEGER, error TEXT, parsed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW())`);

    const newRecords = [];
    for (const contract of contracts) {
        if (!contract) continue;
        // <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—É–∑—ã –∏–∑ CONFIG
        await new Promise(res => setTimeout(res, CONFIG.apiPauseMs)); 
        try {
            const { data } = await axios.get(`https://api.ethplorer.io/getTokenInfo/${contract}?apiKey=freekey`);
            if (data.address && data.symbol && data.holdersCount) {
                newRecords.push({ contract: data.address, symbol: data.symbol, holders: data.holdersCount, error: "" });
            } else {
                newRecords.push({ contract, symbol: 'N/A', holders: 0, error: "Invalid data from API" });
            }
        } catch (e) {
            newRecords.push({ contract, symbol: 'N/A', holders: 0, error: e.message });
        }
    }
    console.log('–î–∞–Ω–Ω—ã–µ –æ —Ö–æ–ª–¥–µ—Ä–∞—Ö —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω—ã:');
    console.table(newRecords);

    for (const r of newRecords) {
        if (r.error || !r.contract) continue;
        await pool.query(`INSERT INTO holders(contract, symbol, holders, error) VALUES($1, $2, $3, $4)`, [r.contract, r.symbol, r.holders, r.error]);
    }
    console.log(`‚úÖ ${newRecords.filter(r => !r.error).length} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É.`);

    console.log('\n--- –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Ç–∞ ---');
    for (const record of newRecords) {
        if (record.error || !record.holders || !record.contract) continue;

        const historyQuery = `
            SELECT
                (SELECT h.holders FROM holders h WHERE h.contract ILIKE $1 ORDER BY h.parsed_at DESC LIMIT 1 OFFSET 1) AS prev_holders,
                (SELECT h.holders FROM holders h WHERE h.contract ILIKE $1 AND h.parsed_at <= NOW() - INTERVAL '1 hour' ORDER BY h.parsed_at DESC LIMIT 1) AS h1_holders,
                (SELECT h.holders FROM holders h WHERE h.contract ILIKE $1 AND h.parsed_at <= NOW() - INTERVAL '3 hours' ORDER BY h.parsed_at DESC LIMIT 1) AS h3_holders,
                (SELECT h.holders FROM holders h WHERE h.contract ILIKE $1 AND h.parsed_at <= NOW() - INTERVAL '12 hours' ORDER BY h.parsed_at DESC LIMIT 1) AS h12_holders,
                (SELECT h.holders FROM holders h WHERE h.contract ILIKE $1 AND h.parsed_at <= NOW() - INTERVAL '24 hours' ORDER BY h.parsed_at DESC LIMIT 1) AS h24_holders
        `;
        const { rows: [history] } = await pool.query(historyQuery, [record.contract]);

        if (!history) continue;
        
        if (isTestMode && record.contract.toLowerCase() === testContract.toLowerCase()) {
            history.prev_holders = testPreviousValue;
            console.log(`[–†–ï–ñ–ò–ú –¢–ï–°–¢–ê] –î–ª—è ${record.symbol} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–¥–¥–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${testPreviousValue}`);
        }

        const currentHolders = record.holders;
        const growth = {
            vsPrevious: calculateGrowth(currentHolders, history.prev_holders),
            last1Hour: calculateGrowth(currentHolders, history.h1_holders),
            last3Hours: calculateGrowth(currentHolders, history.h3_holders),
            last12Hours: calculateGrowth(currentHolders, history.h12_holders),
            last24Hours: calculateGrowth(currentHolders, history.h24_holders),
        };

        const shouldAlert = growth.vsPrevious >= CONFIG.growthThresholds.vsPrevious || growth.last1Hour >= CONFIG.growthThresholds.last1Hour || growth.last3Hours >= CONFIG.growthThresholds.last3Hours || growth.last12Hours >= CONFIG.growthThresholds.last12Hours || growth.last24Hours >= CONFIG.growthThresholds.last24Hours;

        if (shouldAlert) {
            console.log(`[ALERT] –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${record.symbol} (${record.contract})`);
            const alertPayload = { timestamp: new Date().toISOString(), symbol: record.symbol, contract: record.contract, growth_vs_previous: `${growth.vsPrevious.toFixed(2)}%`, growth_1h: `${growth.last1Hour.toFixed(2)}%`, growth_3h: `${growth.last3Hours.toFixed(2)}%`, growth_12h: `${growth.last12Hours.toFixed(2)}%`, growth_24h: `${growth.last24Hours.toFixed(2)}%`};
            
            await sendTelegramAlert(alertPayload);
            
            console.log('-> –î–µ–ª–∞–µ–º –ø–∞—É–∑—É (2 —Å–µ–∫) –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI...');
            await new Promise(res => setTimeout(res, 2000));

            await sendOpenAIAlert(alertPayload);
        } else {
             console.log(`–†–æ—Å—Ç –¥–ª—è ${record.symbol} –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã.`);
        }
    }
    console.log('--- –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω ---\n');

    const deleteResult = await pool.query(`DELETE FROM holders WHERE parsed_at < NOW() - INTERVAL '${CONFIG.cleanupIntervalHours} hours'`);
    console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π.`);

})().catch(e => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞:', e);
    process.exit(1);
}).finally(async () => {
    await pool.end();
    console.log('–†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
});

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function calculateGrowth(current, previous) { if (previous === null || previous === undefined || current <= previous) { return 0; } return ((current - previous) / previous) * 100; }
async function sendTelegramAlert(payload) { if (!CONFIG.telegram.botToken || !CONFIG.telegram.chatId) { console.warn('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ê–ª–µ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω.'); return; } const message = `üìà **–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–æ—Å—Ç —Ö–æ–ª–¥–µ—Ä–æ–≤!**\n-----------------------------------\n**–¢–æ–∫–µ–Ω:** ${payload.symbol}\n**–ö–æ–Ω—Ç—Ä–∞–∫—Ç:** \`${payload.contract}\`\n**–í—Ä–µ–º—è:** ${payload.timestamp}\n-----------------------------------\n**–†–æ—Å—Ç —Å –ø—Ä–æ—à–ª–æ–π –∑–∞–ø–∏—Å–∏:** ${payload.growth_vs_previous}\n**–†–æ—Å—Ç –∑–∞ 1 —á–∞—Å:** ${payload.growth_1h}\n**–†–æ—Å—Ç –∑–∞ 3 —á–∞—Å–∞:** ${payload.growth_3h}\n**–†–æ—Å—Ç –∑–∞ 12 —á–∞—Å–æ–≤:** ${payload.growth_12h}\n**–†–æ—Å—Ç –∑–∞ 24 —á–∞—Å–∞:** ${payload.growth_24h}`; const url = `https://api.telegram.org/bot${CONFIG.telegram.botToken}/sendMessage`; try { await axios.post(url, { chat_id: CONFIG.telegram.chatId, text: message, parse_mode: 'Markdown' }); console.log(`üöÄ –ê–ª–µ—Ä—Ç –¥–ª—è ${payload.symbol} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.`); } catch (error) { console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram:', error.response ? error.response.data : error.message); } }
async function sendOpenAIAlert(payload) { if (!CONFIG.openai.apiKey) { console.warn('API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.'); return; } const systemPrompt = `–í—ã—Å—Ç—É–ø–∞–π –≤ —Ä–æ–ª–∏ **—Å—Ç–∞—Ä—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞** —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –≤–µ–¥—É—â–∏—Ö –≤–µ–Ω—á—É—Ä–Ω—ã—Ö —Ñ–æ–Ω–¥–∞—Ö –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö (—Ç–∞–∫–∏—Ö –∫–∞–∫ Messari, Nansen, Glassnode). –¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π, —Å–∂–∞—Ç—ã–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –¥–∞–Ω–Ω—ã—Ö. –¢—ã —É–º–µ–µ—à—å –±—ã—Å—Ç—Ä–æ –æ—Ç–¥–µ–ª—è—Ç—å —Ö–∞–π–ø –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ **–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∏ –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π 360-–≥—Ä–∞–¥—É—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑** —Ç–æ–∫–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–Ω—É—é —Ç–æ—á–∫—É, –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`; const userPromptTemplate = `
# –ö–û–ù–¢–ï–ö–°–¢ –°–ò–ì–ù–ê–õ–ê
–Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Ç–µ–±–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ—Å—Ç–µ —á–∏—Å–ª–∞ —Ö–æ–ª–¥–µ—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞. –≠—Ç–æ—Ç —Ä–æ—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏–≥–Ω–∞–ª–æ–º –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –ø–æ–≤—ã—à–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ –∏–ª–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
# –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê
* **–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:** {TOKEN_NAME}
* **–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (Ethereum):** {TOKEN_CONTRACT}
* **–î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞ —Ö–æ–ª–¥–µ—Ä–æ–≤ (—Å–∏–≥–Ω–∞–ª):**
    * –†–æ—Å—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç (vs –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–ø–∏—Å—å): {GROWTH_VS_PREVIOUS}
    * –†–æ—Å—Ç –∑–∞ 1 —á–∞—Å: {GROWTH_1H}
    * –†–æ—Å—Ç –∑–∞ 3 —á–∞—Å–∞: {GROWTH_3H}
    * –†–æ—Å—Ç –∑–∞ 12 —á–∞—Å–æ–≤: {GROWTH_12H}
    * –†–æ—Å—Ç –∑–∞ 24 —á–∞—Å–∞: {GROWTH_24H}
# –ó–ê–î–ê–ß–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê (–ø—Ä–æ—Ä–∞–±–æ—Ç–∞–π –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç)
1.  **–°–æ–±—ã—Ç–∏—è –∏ –ú–µ–¥–∏–∞-—Ñ–æ–Ω:** –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–æ–Ω—Å—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö (X/Twitter, Discord, Blog) –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–ª—é—á–µ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ-–°–ú–ò –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é. –ï—Å—Ç—å –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Ñ–æ–ø–æ–≤–æ–¥ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–≥–ª–æ —Å–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—Å—Ç?
2.  **–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** –û—Ü–µ–Ω–∏, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–æ—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –Ω–µ–¥–∞–≤–Ω–µ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏, Airdrop, –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞–º–∏.
3.  **–ü—Ä–∏—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (On-chain):** –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –ª–∏ —Ä–æ—Å—Ç —Ö–æ–ª–¥–µ—Ä–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ —Å–µ—Ç–∏? –ö—Ä–∞—Ç–∫–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–Ω–∞–º–∏–∫—É –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤ –Ω–∞ DEX (Uniswap, Sushiswap), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏.
4.  **–ö—Ä—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ (Big Money):** –ü—Ä–æ–≤–µ—Ä—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ —ç—Ç–æ–º—É —Ç–æ–∫–µ–Ω—É –Ω–∞ Etherscan –∏–ª–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö. –ï—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ —Ñ–æ–Ω–¥–æ–≤, "–∫–∏—Ç–æ–≤" –∏–ª–∏ –∫—Ä—É–ø–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤?
5.  **–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è "Smart Money":** –ö–∞–∫ –∫ —ç—Ç–æ–º—É —Ç–æ–∫–µ–Ω—É –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∏–∑–≤–µ—Å—Ç–Ω—ã–µ "—É–º–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏" (smart money wallets)? –ï—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ —Å –∏—Ö —Å—Ç–æ—Ä–æ–Ω—ã? (–ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ Nansen, Arkham, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ).
6.  **–û–±—â–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç (Sentiment):** –ö–∞–∫–æ–π —Å–µ–π—á–∞—Å –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç –ø–æ —Ç–æ–∫–µ–Ω—É –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö? –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ "bullish", "bearish", "scam", "gem".
7.  **–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∏ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ê–Ω–∞–ª–∏–∑ (FA/TA):**
    * **FA:** –î–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ø–æ —Å—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞, –µ–≥–æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ (utility) –∏ —Ç–æ–∫–µ–Ω–æ–º–∏–∫–µ.
    * **TA:** –£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RSI, MACD –Ω–∞ –¥–Ω–µ–≤–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ). –¢—Ä–µ–Ω–¥ –≤–æ—Å—Ö–æ–¥—è—â–∏–π, –Ω–∏—Å—Ö–æ–¥—è—â–∏–π –∏–ª–∏ –±–æ–∫–æ–≤–∏–∫?
8.  **–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:** –ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é (Market Cap), FDV (Fully Diluted Valuation) –∏ —Ü–∏—Ä–∫—É–ª–∏—Ä—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ö–∞–∫ —ç—Ç–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?
9.  **–û—Ü–µ–Ω–∫–∞ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞:** –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é. –ß–µ—Ç–∫–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ **–±—ã—á—å–∏ —Ñ–∞–∫—Ç–æ—Ä—ã (–ó–ê)** –∏ **–º–µ–¥–≤–µ–∂—å–∏ —Ñ–∞–∫—Ç–æ—Ä—ã (–ü–†–û–¢–ò–í)**. –ù–µ –¥–∞–≤–∞–π –ø—Ä—è–º–æ–≥–æ —Å–æ–≤–µ—Ç–∞, –∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É.
10. **–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤:** –í—ã—è–≤–∏ –∏ —á–µ—Ç–∫–æ –æ–±–æ–∑–Ω–∞—á—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ–∫–µ–Ω–æ–º –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∏—Å–∫–∏ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏, —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ —Ä–∏—Å–∫–∏, –Ω–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å).
# –§–û–†–ú–ê–¢ –í–´–í–û–î–ê
–ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown —Å —á–µ—Ç–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ 10 –ø—É–Ω–∫—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞. –í –∫–æ–Ω—Ü–µ —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ.
# –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò –°–¢–ò–õ–¨
* –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ –ø—É–Ω–∫—Ç—É –Ω–µ—Ç, —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏: "–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç" –∏–ª–∏ "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å".
* –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é, –Ω–æ –ø–æ–Ω—è—Ç–Ω—É—é –ª–µ–∫—Å–∏–∫—É.
* **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å –≤ –∫–æ–Ω—Ü–µ –æ—Ç—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–∏—Å–∫–ª–µ–π–º–µ—Ä:** *"–î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –∏–ª–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (DYOR)."*
    `;
    const finalUserPrompt = userPromptTemplate.replace('{TOKEN_NAME}', payload.symbol).replace('{TOKEN_CONTRACT}', payload.contract).replace('{GROWTH_VS_PREVIOUS}', payload.growth_vs_previous).replace('{GROWTH_1H}', payload.growth_1h).replace('{GROWTH_3H}', payload.growth_3h).replace('{GROWTH_12H}', payload.growth_12h).replace('{GROWTH_24H}', payload.growth_24h);
    
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${payload.symbol}...`);
    try {
        const response = await axios.post('https://api.openai.com/v1/chat/completions', { model: CONFIG.openai.model, messages: [{ role: 'system', content: systemPrompt }, { role: 'user', content: finalUserPrompt }] }, { headers: { 'Authorization': `Bearer ${CONFIG.openai.apiKey}` }});
        const analysisText = response.data.choices[0].message.content;
        console.log(`üß† –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ—Ç OpenAI –¥–ª—è ${payload.symbol} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.`);
        if (analysisText) {
            const reportMessage = `ü§ñ **–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ ${payload.symbol}**:\n\n${analysisText}`;
            const url = `https://api.telegram.org/bot${CONFIG.telegram.botToken}/sendMessage`;
            await axios.post(url, { chat_id: CONFIG.telegram.chatId, text: reportMessage, parse_mode: 'Markdown' });
            console.log(`‚úÖ –û—Ç—á–µ—Ç –ø–æ ${payload.symbol} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.`);
        }
    } catch (error) { console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error.response ? error.response.data.error.message : error.message); }
}