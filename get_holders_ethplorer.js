// get_holders_ethplorer.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø 5.3: –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–ê–í–ï–†–®–ï–ù–ò–ï)
const axios = require('axios');
const { Pool } = require('pg');

const CONFIG = {
    growthThresholds: { vsPrevious: 0.3, last1Hour: 0.8, last3Hours: 1.0, last12Hours: 3.0, last24Hours: 5.0 },
    telegram: { botToken: process.env.TELEGRAM_BOT_TOKEN, chatId: process.env.TELEGRAM_CHAT_ID },
    openai: { apiKey: process.env.OPENAI_API_KEY, model: 'gpt-4o' },
    cleanupIntervalHours: 48, 
    apiPauseMs: 2000,
    searchWindowMinutes: 10,
};

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
});

const main = async () => {
    console.log('–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...');

    let contracts;
    let testPreviousValue = null;
    let testContract = null;
    let isTestMode = false;

    if (process.argv[2] === '--test') {
        isTestMode = true;
        testContract = process.argv[3];
        testPreviousValue = process.argv[4] ? parseInt(process.argv[4], 10) : null;
        contracts = [testContract];
        
        console.log(`--- –ó–ê–ü–£–°–ö –í –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ${testContract} ---`);
        if (!testContract || testPreviousValue === null) {
            console.error("–û—à–∏–±–∫–∞: –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ —É–∫–∞–∂–∏—Ç–µ --test <–∫–æ–Ω—Ç—Ä–∞–∫—Ç> <–∑–Ω–∞—á–µ–Ω–∏–µ>");
            process.exit(1);
        }
    } else {
        contracts = process.argv.slice(2);
    }

    if (!contracts || !contracts.length || (contracts.length === 1 && !contracts[0])) {
        console.error("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.");
        process.exit(1);
    }
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${contracts.length} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);

    await pool.query(`CREATE TABLE IF NOT EXISTS holders (id SERIAL PRIMARY KEY, contract TEXT NOT NULL, symbol TEXT, holders INTEGER, error TEXT, parsed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW())`);

    const apiKey = process.env.ETHPLORER_API_KEY || 'freekey';
    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á: ${apiKey === 'freekey' ? '–ø—É–±–ª–∏—á–Ω—ã–π freekey' : '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π'}`);

    const newRecords = [];
    for (const contract of contracts) {
        if (!contract) continue;
        await new Promise(res => setTimeout(res, CONFIG.apiPauseMs)); 
        try {
            const { data } = await axios.get(`https://api.ethplorer.io/getTokenInfo/${contract}?apiKey=${apiKey}`);
            if (data.address && data.symbol && data.holdersCount) {
                newRecords.push({ contract: data.address, symbol: data.symbol, holders: data.holdersCount, error: "" });
            } else {
                console.log(`[DEBUG] –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ${contract}:`, data);
                newRecords.push({ contract, symbol: 'N/A', holders: 0, error: "Invalid data from API" });
            }
        } catch (e) {
            newRecords.push({ contract, symbol: 'N/A', holders: 0, error: e.message });
        }
    }
    console.log('–î–∞–Ω–Ω—ã–µ –æ —Ö–æ–ª–¥–µ—Ä–∞—Ö —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω—ã:');
    console.table(newRecords);

    for (const r of newRecords) {
        if (r.error || !r.contract) continue;
        await pool.query(`INSERT INTO holders(contract, symbol, holders, error) VALUES($1, $2, $3, $4)`, [r.contract, r.symbol, r.holders, r.error]);
    }
    console.log(`‚úÖ ${newRecords.filter(r => !r.error).length} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É.`);

    console.log('\n--- –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Ç–∞ ---');
    for (const record of newRecords) {
        try {
            if (record.error || !record.holders || !record.contract) continue;

            const historyQuery = `
                WITH vars AS ( SELECT NOW() - INTERVAL '1 hour' AS h1_target, NOW() - INTERVAL '3 hours' AS h3_target, NOW() - INTERVAL '12 hours' AS h12_target, NOW() - INTERVAL '24 hours' AS h24_target, INTERVAL '${CONFIG.searchWindowMinutes} minutes' AS window )
                SELECT
                    (SELECT h.holders FROM holders h WHERE h.contract ILIKE $1 ORDER BY h.parsed_at DESC LIMIT 1 OFFSET 1) AS prev_holders,
                    (SELECT h.holders FROM holders h, vars WHERE h.contract ILIKE $1 AND h.parsed_at BETWEEN (vars.h1_target - vars.window) AND (vars.h1_target + vars.window) ORDER BY ABS(EXTRACT(EPOCH FROM (h.parsed_at - vars.h1_target))) LIMIT 1) AS h1_holders,
                    (SELECT h.holders FROM holders h, vars WHERE h.contract ILIKE $1 AND h.parsed_at BETWEEN (vars.h3_target - vars.window) AND (vars.h3_target + vars.window) ORDER BY ABS(EXTRACT(EPOCH FROM (h.parsed_at - vars.h3_target))) LIMIT 1) AS h3_holders,
                    (SELECT h.holders FROM holders h, vars WHERE h.contract ILIKE $1 AND h.parsed_at BETWEEN (vars.h12_target - vars.window) AND (vars.h12_target + vars.window) ORDER BY ABS(EXTRACT(EPOCH FROM (h.parsed_at - vars.h12_target))) LIMIT 1) AS h12_holders,
                    (SELECT h.holders FROM holders h, vars WHERE h.contract ILIKE $1 AND h.parsed_at BETWEEN (vars.h24_target - vars.window) AND (vars.h24_target + vars.window) ORDER BY ABS(EXTRACT(EPOCH FROM (h.parsed_at - vars.h24_target))) LIMIT 1) AS h24_holders
            `;
            const { rows: [history] } = await pool.query(historyQuery, [record.contract]);

            if (!history) continue;
            
            if (isTestMode && record.contract.toLowerCase() === testContract.toLowerCase()) {
                history.prev_holders = testPreviousValue;
                console.log(`[–†–ï–ñ–ò–ú –¢–ï–°–¢–ê] –î–ª—è ${record.symbol} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–¥–¥–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${testPreviousValue}`);
            }

            const currentHolders = record.holders;
            const growth = {
                vsPrevious: calculateGrowth(currentHolders, history.prev_holders),
                last1Hour: calculateGrowth(currentHolders, history.h1_holders),
                last3Hours: calculateGrowth(currentHolders, history.h3_holders),
                last12Hours: calculateGrowth(currentHolders, history.h12_holders),
                last24Hours: calculateGrowth(currentHolders, history.h24_holders),
            };

            const shouldAlert = growth.vsPrevious >= CONFIG.growthThresholds.vsPrevious || growth.last1Hour >= CONFIG.growthThresholds.last1Hour || growth.last3Hours >= CONFIG.growthThresholds.last3Hours || growth.last12Hours >= CONFIG.growthThresholds.last12Hours || growth.last24Hours >= CONFIG.growthThresholds.last24Hours;

            if (shouldAlert) {
                console.log(`[ALERT] –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${record.symbol} (${record.contract})`);
                const alertPayload = { timestamp: new Date().toISOString(), symbol: record.symbol, contract: record.contract, growth_vs_previous: `${growth.vsPrevious.toFixed(2)}%`, growth_1h: `${growth.last1Hour.toFixed(2)}%`, growth_3h: `${growth.last3Hours.toFixed(2)}%`, growth_12h: `${growth.last12Hours.toFixed(2)}%`, growth_24h: `${growth.last24Hours.toFixed(2)}%`};
                await sendTelegramAlert(alertPayload);
                console.log('-> –î–µ–ª–∞–µ–º –ø–∞—É–∑—É (2 —Å–µ–∫) –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI...');
                await new Promise(res => setTimeout(res, 2000));
                await sendOpenAIAlert(alertPayload);
            } else {
                 console.log(`–†–æ—Å—Ç –¥–ª—è ${record.symbol} –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã.`);
            }
        } catch (error) {
            console.error(`\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞ ${record.symbol} (${record.contract}):`);
            console.error(error);
        }
    }
    console.log('--- –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω ---\n');

    const deleteResult = await pool.query(`DELETE FROM holders WHERE parsed_at < NOW() - INTERVAL '${CONFIG.cleanupIntervalHours} hours'`);
    console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π.`);
};

main()
    .then(() => {
        console.log('–†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    })
    .catch(e => {
        console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –†–ê–ë–û–¢–ï –°–ö–†–ò–ü–¢–ê:', e);
        process.exit(1);
    })
    .finally(() => {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ: –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∏–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        pool.end();
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.');
    });


// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
function calculateGrowth(current, previous) { /* ... */ }
async function sendTelegramAlert(payload) { /* ... */ }
async function sendOpenAIAlert(payload) { /* ... */ }