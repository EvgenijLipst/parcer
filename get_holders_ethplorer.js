// get_holders_ethplorer.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
const axios = require('axios');
const { Pool } = require('pg');

const CONFIG = {
    growthThresholds: {
        vsPrevious: 0.3,
        last1Hour: 0.8,
        last3Hours: 1.0,
        last12Hours: 3.0,
        last24Hours: 5.0,
    },
    telegram: {
        botToken: process.env.TELEGRAM_BOT_TOKEN,
        chatId: process.env.TELEGRAM_CHAT_ID,
    },
    openai: {
        apiKey: process.env.OPENAI_API_KEY,
        model: 'gpt-4o',
    },
    cleanupIntervalHours: 24,
};

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
});

(async () => {
    console.log('–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...');

    await pool.query(`
        CREATE TABLE IF NOT EXISTS holders (
            id SERIAL PRIMARY KEY,
            contract TEXT NOT NULL,
            symbol TEXT,
            holders INTEGER,
            error TEXT,
            parsed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        )
    `);

    const contracts = process.argv.slice(2);
    if (!contracts.length) {
        console.error("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.");
        process.exit(1);
    }
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${contracts.length} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);

    const newRecords = [];
    for (const contract of contracts) {
        await new Promise(res => setTimeout(res, 1000));
        try {
            const { data } = await axios.get(`https://api.ethplorer.io/getTokenInfo/${contract}?apiKey=freekey`);
            if (data.symbol && data.holdersCount) {
                newRecords.push({ contract, symbol: data.symbol, holders: data.holdersCount, error: "" });
            } else {
                newRecords.push({ contract, symbol: 'N/A', holders: 0, error: "Invalid data from API" });
            }
        } catch (e) {
            newRecords.push({ contract, symbol: 'N/A', holders: 0, error: e.message });
        }
    }
    console.log('–î–∞–Ω–Ω—ã–µ –æ —Ö–æ–ª–¥–µ—Ä–∞—Ö —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω—ã:');
    console.table(newRecords);

    for (const r of newRecords) {
        if (r.error) continue;
        await pool.query(
            `INSERT INTO holders(contract, symbol, holders, error) VALUES($1, $2, $3, $4)`,
            [r.contract, r.symbol, r.holders, r.error]
        );
    }
    console.log(`‚úÖ ${newRecords.filter(r => !r.error).length} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É.`);

    console.log('\n--- –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Ç–∞ ---');
    for (const record of newRecords) {
        if (record.error || !record.holders) continue; 

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.
        // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–∞–º—è—Ç–∏ (record.holders).
        const historyQuery = `
            SELECT
                (SELECT h.holders FROM holders h WHERE h.contract = $1 ORDER BY h.parsed_at DESC LIMIT 1 OFFSET 1) AS prev_holders,
                (SELECT h.holders FROM holders h WHERE h.contract = $1 AND h.parsed_at <= NOW() - INTERVAL '1 hour' ORDER BY h.parsed_at DESC LIMIT 1) AS h1_holders,
                (SELECT h.holders FROM holders h WHERE h.contract = $1 AND h.parsed_at <= NOW() - INTERVAL '3 hours' ORDER BY h.parsed_at DESC LIMIT 1) AS h3_holders,
                (SELECT h.holders FROM holders h WHERE h.contract = $1 AND h.parsed_at <= NOW() - INTERVAL '12 hours' ORDER BY h.parsed_at DESC LIMIT 1) AS h12_holders,
                (SELECT h.holders FROM holders h WHERE h.contract = $1 AND h.parsed_at <= NOW() - INTERVAL '24 hours' ORDER BY h.parsed_at DESC LIMIT 1) AS h24_holders
        `;
        const { rows: [history] } = await pool.query(historyQuery, [record.contract]);

        // –ú—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏–ª–∏ –ª–æ–≥–∏–∫—É.
        // –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å, –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ —Å—é–¥–∞.

        if (!history) continue;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º `record.holders` –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
        const currentHolders = record.holders;

        const growth = {
            vsPrevious: calculateGrowth(currentHolders, history.prev_holders),
            last1Hour: calculateGrowth(currentHolders, history.h1_holders),
            last3Hours: calculateGrowth(currentHolders, history.h3_holders),
            last12Hours: calculateGrowth(currentHolders, history.h12_holders),
            last24Hours: calculateGrowth(currentHolders, history.h24_holders),
        };

        const shouldAlert =
            growth.vsPrevious >= CONFIG.growthThresholds.vsPrevious ||
            growth.last1Hour >= CONFIG.growthThresholds.last1Hour ||
            growth.last3Hours >= CONFIG.growthThresholds.last3Hours ||
            growth.last12Hours >= CONFIG.growthThresholds.last12Hours ||
            growth.last24Hours >= CONFIG.growthThresholds.last24Hours;

        if (shouldAlert) {
            console.log(`[ALERT] –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${record.symbol} (${record.contract})`);
            const alertPayload = {
                timestamp: new Date().toISOString(),
                symbol: record.symbol,
                contract: record.contract,
                growth_vs_previous: `${growth.vsPrevious.toFixed(2)}%`,
                growth_1h: `${growth.last1Hour.toFixed(2)}%`,
                growth_3h: `${growth.last3Hours.toFixed(2)}%`,
                growth_12h: `${growth.last12Hours.toFixed(2)}%`,
                growth_24h: `${growth.last24Hours.toFixed(2)}%`,
            };
            await sendTelegramAlert(alertPayload);
            await sendOpenAIAlert(alertPayload);
        } else {
             console.log(`–†–æ—Å—Ç –¥–ª—è ${record.symbol} –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã.`);
        }
    }
    console.log('--- –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω ---\n');

    const deleteResult = await pool.query(
        `DELETE FROM holders WHERE parsed_at < NOW() - INTERVAL '${CONFIG.cleanupIntervalHours} hours'`
    );
    console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π.`);

})().catch(e => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞:', e);
    process.exit(1);
}).finally(async () => {
    await pool.end();
    console.log('–†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.');
});

function calculateGrowth(current, previous) {
    if (previous === null || previous === undefined || current <= previous) {
        return 0;
    }
    return ((current - previous) / previous) * 100;
}

async function sendTelegramAlert(payload) {
    if (!CONFIG.telegram.botToken || !CONFIG.telegram.chatId) {
        console.warn('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ê–ª–µ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω.');
        return;
    }
    const message = `
üìà **–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–æ—Å—Ç —Ö–æ–ª–¥–µ—Ä–æ–≤!**
-----------------------------------
**–¢–æ–∫–µ–Ω:** ${payload.symbol}
**–ö–æ–Ω—Ç—Ä–∞–∫—Ç:** \`${payload.contract}\`
**–í—Ä–µ–º—è:** ${payload.timestamp}
-----------------------------------
**–†–æ—Å—Ç —Å –ø—Ä–æ—à–ª–æ–π –∑–∞–ø–∏—Å–∏:** ${payload.growth_vs_previous}
**–†–æ—Å—Ç –∑–∞ 1 —á–∞—Å:** ${payload.growth_1h}
**–†–æ—Å—Ç –∑–∞ 3 —á–∞—Å–∞:** ${payload.growth_3h}
**–†–æ—Å—Ç –∑–∞ 12 —á–∞—Å–æ–≤:** ${payload.growth_12h}
**–†–æ—Å—Ç –∑–∞ 24 —á–∞—Å–∞:** ${payload.growth_24h}
    `;
    const url = `https://api.telegram.org/bot${CONFIG.telegram.botToken}/sendMessage`;
    try {
        await axios.post(url, {
            chat_id: CONFIG.telegram.chatId,
            text: message,
            parse_mode: 'Markdown'
        });
        console.log(`üöÄ –ê–ª–µ—Ä—Ç –¥–ª—è ${payload.symbol} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram:', error.response ? error.response.data : error.message);
    }
}

async function sendOpenAIAlert(payload) {
    if (!CONFIG.openai.apiKey) {
        console.warn('API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ê–ª–µ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω.');
        return;
    }
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ—Å—Ç–µ —Ö–æ–ª–¥–µ—Ä–æ–≤ —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É. –¢–æ–∫–µ–Ω: ${payload.symbol}. –†–æ—Å—Ç –∑–∞ 1 —á–∞—Å: ${payload.growth_1h}, —Ä–æ—Å—Ç –∑–∞ 24 —á–∞—Å–∞: ${payload.growth_24h}.`;
    try {
        await axios.post('https://api.openai.com/v1/chat/completions', {
            model: CONFIG.openai.model,
            messages: [
                { role: 'system', content: 'You are a crypto market analyst.' },
                { role: 'user', content: prompt }
            ]
        }, {
            headers: { 'Authorization': `Bearer ${CONFIG.openai.apiKey}` }
        });
        console.log(`üß† –î–∞–Ω–Ω—ã–µ –¥–ª—è ${payload.symbol} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ ChatGPT.`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ OpenAI:', error.response ? error.response.data : error.message);
    }
}