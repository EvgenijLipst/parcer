// get_holders_ethplorer.js (–í–ï–†–°–ò–Ø –î–õ–Ø –ì–õ–£–ë–û–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò)
const axios = require('axios');
const { Pool } = require('pg');

const CONFIG = {
    growthThresholds: { vsPrevious: 0.3, last1Hour: 0.8, last3Hours: 1.0, last12Hours: 3.0, last24Hours: 5.0 },
    telegram: { botToken: process.env.TELEGRAM_BOT_TOKEN, chatId: process.env.TELEGRAM_CHAT_ID },
    openai: { apiKey: process.env.OPENAI_API_KEY, model: 'gpt-4o' },
    cleanupIntervalHours: 24,
};

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
});

(async () => {
    console.log('–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...');

    let contracts;
    let testPreviousValue = null;
    let testContract = null;

    if (process.argv[2] === '--test') {
        testContract = process.argv[3];
        testPreviousValue = process.argv[4] ? parseInt(process.argv[4], 10) : null;
        contracts = [testContract];
        
        console.log(`--- –ó–ê–ü–£–°–ö –í –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ${testContract} ---`);
        if (!testContract || testPreviousValue === null) {
            console.error("–û—à–∏–±–∫–∞: –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ —É–∫–∞–∂–∏—Ç–µ --test <–∫–æ–Ω—Ç—Ä–∞–∫—Ç> <–∑–Ω–∞—á–µ–Ω–∏–µ>");
            process.exit(1);
        }
    } else {
        contracts = process.argv.slice(2);
    }

    if (!contracts || !contracts.length || (contracts.length === 1 && contracts[0] === undefined)) {
        console.error("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.");
        process.exit(1);
    }
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${contracts.length} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);

    await pool.query(`CREATE TABLE IF NOT EXISTS holders (id SERIAL PRIMARY KEY, contract TEXT NOT NULL, symbol TEXT, holders INTEGER, error TEXT, parsed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW())`);

    const newRecords = [];
    for (const contract of contracts) {
        if (!contract) continue;
        await new Promise(res => setTimeout(res, 1000));
        try {
            const { data } = await axios.get(`https://api.ethplorer.io/getTokenInfo/${contract}?apiKey=freekey`);
            if (data.address && data.symbol && data.holdersCount) {
                newRecords.push({ contract: data.address, symbol: data.symbol, holders: data.holdersCount, error: "" });
            } else {
                newRecords.push({ contract, symbol: 'N/A', holders: 0, error: "Invalid data from API" });
            }
        } catch (e) {
            newRecords.push({ contract, symbol: 'N/A', holders: 0, error: e.message });
        }
    }
    console.log('–î–∞–Ω–Ω—ã–µ –æ —Ö–æ–ª–¥–µ—Ä–∞—Ö —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω—ã:');
    console.table(newRecords);

    for (const r of newRecords) {
        if (r.error || !r.contract) continue;
        await pool.query(`INSERT INTO holders(contract, symbol, holders, error) VALUES($1, $2, $3, $4)`, [r.contract, r.symbol, r.holders, r.error]);
    }
    console.log(`‚úÖ ${newRecords.filter(r => !r.error).length} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É.`);

    console.log('\n--- –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Ç–∞ ---');
    for (const record of newRecords) {
        if (record.error || !record.holders || !record.contract) {
            console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∑–∞–ø–∏—Å–∏, —Ç.–∫. –≤ –Ω–µ–π –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö:`, record);
            continue;
        }

        // =================================================================
        //            –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –ì–õ–£–ë–û–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
        // =================================================================
        console.log(`\n--- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–î –°–ë–û–ï–ú –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${record.symbol || 'N/A'} ---`);
        console.log(`Is test mode active? (testPreviousValue !== null):`, testPreviousValue !== null);
        
        console.log(`\n--- –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'record' ---`);
        console.log(`–¢–∏–ø record: ${typeof record}`);
        console.log(`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ record:`, record);
        console.log(`–ó–Ω–∞—á–µ–Ω–∏–µ record.contract: ${record.contract}`);
        console.log(`–¢–∏–ø record.contract: ${typeof record.contract}`);
        
        console.log(`\n--- –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'testContract' ---`);
        console.log(`–¢–∏–ø testContract: ${typeof testContract}`);
        console.log(`–ó–Ω–∞—á–µ–Ω–∏–µ testContract: ${testContract}`);
        
        console.log('--- –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ---');
        // =================================================================
        
        // –°—Ç—Ä–æ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–±–æ–π
        if (testPreviousValue !== null && testContract && record.contract && record.contract.toLowerCase() === testContract.toLowerCase()) {
            // ... (–¥–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞)
        }
        
        // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }
    console.log('--- –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω ---\n');

    const deleteResult = await pool.query(`DELETE FROM holders WHERE parsed_at < NOW() - INTERVAL '${CONFIG.cleanupIntervalHours} hours'`);
    console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π.`);

})().catch(e => {
    console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', e);
    process.exit(1);
}).finally(async () => {
    await pool.end();
    console.log('–†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
// ...